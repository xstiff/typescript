{"ast":null,"code":"import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { rightLogShiftNumber } from '../../plain/number/index.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});","map":{"version":3,"names":["createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo14xDs","createMatAlgo01xDSid","createMatAlgo10xSids","createMatAlgo08xS0Sid","factory","createMatrixAlgorithmSuite","rightLogShiftNumber","createUseMatrixForArrayScalar","name","dependencies","createRightLogShift","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","matAlgo01xDSid","matAlgo02xDS0","matAlgo08xS0Sid","matAlgo10xSids","matAlgo11xS0s","matAlgo14xDs","matrixAlgorithmSuite","useMatrixForArrayScalar","referToSelf","self","x","y","clone","size","storage","SS","DS","SD"],"sources":["C:/Users/domin/Desktop/Zadanie/zad/node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { rightLogShiftNumber } from '../../plain/number/index.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}