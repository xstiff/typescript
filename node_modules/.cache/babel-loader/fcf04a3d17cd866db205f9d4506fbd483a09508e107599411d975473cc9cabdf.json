{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'largerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createLargerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1)         // returns false\n   *    math.largerEq(2, 1 + 1)       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n  return typed(name, createLargerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x >= y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== -1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x >= y || nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createLargerEq","_ref","typed","config","matrix","DenseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createLargerEqNumber","x","y","BigNumberBigNumber","gte","epsilon","compare","ComplexComplex","TypeError","SS","DS","Ss","_ref2","numberNumber"],"sources":["C:/Users/domin/Desktop/Zadanie/zad/node_modules/mathjs/lib/esm/function/relational/largerEq.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'largerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createLargerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1)         // returns false\n   *    math.largerEq(2, 1 + 1)       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n  return typed(name, createLargerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x >= y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== -1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x >= y || nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,WAAW,IAAIC,cAAc,QAAQ,sCAAsC;AACpF,SAASD,WAAW,QAAQ,uBAAuB;AACnD,SAASE,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,IAAIC,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,CAAC;AAC/D,OAAO,IAAIC,cAAc,GAAG,eAAeR,OAAO,CAACM,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC7E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,MAAM;IACNC;EACF,CAAC,GAAGJ,IAAI;EACR,IAAIK,aAAa,GAAGb,mBAAmB,CAAC;IACtCS;EACF,CAAC,CAAC;EACF,IAAIK,aAAa,GAAGb,mBAAmB,CAAC;IACtCQ,KAAK;IACLG;EACF,CAAC,CAAC;EACF,IAAIG,aAAa,GAAGb,mBAAmB,CAAC;IACtCO,KAAK;IACLG;EACF,CAAC,CAAC;EACF,IAAII,oBAAoB,GAAGb,0BAA0B,CAAC;IACpDM,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIM,YAAY,GAAGb,kBAAkB,CAAC;IACpCK;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAEa,oBAAoB,CAAC;IACtCT,KAAK;IACLC;EACF,CAAC,CAAC,EAAE;IACF,kBAAkB,EAAE,CAACS,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC;IACpC,sBAAsB,EAAE,SAASC,kBAAkB,CAACF,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACG,GAAG,CAACF,CAAC,CAAC,IAAItB,cAAc,CAACqB,CAAC,EAAEC,CAAC,EAAEV,MAAM,CAACa,OAAO,CAAC;IACzD,CAAC;IACD,oBAAoB,EAAE,CAACJ,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACK,OAAO,CAACJ,CAAC,CAAC,KAAK,CAAC,CAAC;IACnD,kBAAkB,EAAE,SAASK,cAAc,GAAG;MAC5C,MAAM,IAAIC,SAAS,CAAC,qDAAqD,CAAC;IAC5E;EACF,CAAC,EAAET,YAAY,EAAED,oBAAoB,CAAC;IACpCW,EAAE,EAAEb,aAAa;IACjBc,EAAE,EAAEf,aAAa;IACjBgB,EAAE,EAAEd;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACF,OAAO,IAAIG,oBAAoB,GAAG,eAAenB,OAAO,CAACM,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAEyB,KAAK,IAAI;EAC3F,IAAI;IACFrB,KAAK;IACLC;EACF,CAAC,GAAGoB,KAAK;EACT,OAAOrB,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAAS0B,YAAY,CAACZ,CAAC,EAAEC,CAAC,EAAE;MAC5C,OAAOD,CAAC,IAAIC,CAAC,IAAIvB,WAAW,CAACsB,CAAC,EAAEC,CAAC,EAAEV,MAAM,CAACa,OAAO,CAAC;IACpD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}