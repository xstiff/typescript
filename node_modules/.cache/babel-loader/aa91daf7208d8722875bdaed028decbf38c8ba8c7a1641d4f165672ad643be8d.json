{"ast":null,"code":"import { bitAndBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitAndNumber } from '../../plain/number/index.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});","map":{"version":3,"names":["bitAndBigNumber","createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo06xS0S0","factory","createMatrixAlgorithmSuite","bitAndNumber","name","dependencies","createBitAnd","_ref","typed","matrix","equalScalar","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matrixAlgorithmSuite","SS","DS","Ss"],"sources":["C:/Users/domin/Desktop/Zadanie/zad/node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js"],"sourcesContent":["import { bitAndBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitAndNumber } from '../../plain/number/index.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kCAAkC;AAClE,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC;AACrD,OAAO,IAAIC,YAAY,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR,IAAII,aAAa,GAAGb,mBAAmB,CAAC;IACtCU,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIE,cAAc,GAAGZ,oBAAoB,CAAC;IACxCQ,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIG,aAAa,GAAGd,mBAAmB,CAAC;IACtCS,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAII,oBAAoB,GAAGZ,0BAA0B,CAAC;IACpDM,KAAK;IACLC;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,YAAY;IAC9B,sBAAsB,EAAEN;EAC1B,CAAC,EAAEiB,oBAAoB,CAAC;IACtBC,EAAE,EAAEH,cAAc;IAClBI,EAAE,EAAEL,aAAa;IACjBM,EAAE,EAAEJ;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}